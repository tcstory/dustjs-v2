{
  function makeInteger(arr) {
    return parseInt(arr.join(''), 10);
  }
  function withPosition(arr) {
    arr.location = location();
    return arr;
  }
}

start
  = body

body
  = p:part* {
    const body = ["body"].concat(p);
    return withPosition(body);
  }


/*-------------------------------------------------------------------------------------------------------------------------------------
   part is defined as anything that matches with raw or comment or section or partial or special or reference or buffer
---------------------------------------------------------------------------------------------------------------------------------------*/

part
  = raw
  / buffer
  / comment
  / reference

/*-------------------------------------------------------------------------------------------------------------------------------------
   key is defined as a character matching a to z, upper or lower case, followed by 0 or more alphanumeric characters
---------------------------------------------------------------------------------------------------------------------------------------*/
key "key"
  = h:[a-zA-Z_$] t:[0-9a-zA-Z_$-]*
  { return h + t.join('') }

array "array"
  = i:( lb a:( n:([0-9]+) { return n.join(""); } / identifier) rb { return a; }) nk: array_part? { if (nk) { nk.unshift(i); } else { nk = [i] } return nk; }

array_part "array_part"
  = d:("." k:key { return k; })+ a:(array)? { if (a) { return d.concat(a); } else { return d; } }

/*-------------------------------------------------------------------------------------------------------------------------------------
  path is defined as matching a key plus one or more characters of key preceded by a dot
---------------------------------------------------------------------------------------------------------------------------------------*/

path "path"
  = k:key? d:(array_part / array)+ {
    d = d[0];
    if (k && d) {
      d.unshift(k);
      return withPosition([false, d]);
    }
    return withPosition([true, d]);
  }
  / "." d:(array_part / array)* {
    if (d.length > 0) {
      return withPosition([true, d[0]]);
    }
    return withPosition([true, []]);
  }


/*-------------------------------------------------------------------------------------------------------------------------------------
   filters is defined as matching a pipe character followed by anything that matches the key
---------------------------------------------------------------------------------------------------------------------------------------*/
filters "filters"
  = f:("|" n:key {return n})*
  { return ["filters"].concat(f) }


/*-------------------------------------------------------------------------------------------------------------------------------------
  inline_part is defined as matching a special or reference or literal
---------------------------------------------------------------------------------------------------------------------------------------*/

buffer "buffer"
  = e:eol w:ws* {
    return withPosition(["format", e, w.join('')])
  }
  / b:(!tag !raw !comment !eol c:. { return c; })+ {
    return withPosition(["buffer", b.join('')])
  }

/*-------------------------------------------------------------------------------------------------------------------------------------
   identifier is defined as matching a path or key
---------------------------------------------------------------------------------------------------------------------------------------*/

identifier "identifier"
  = p:path {
    const arr = ["path"].concat(p);
    arr.text = p[1].join('.');
    return arr;
  }
  / k:key {
    const arr = ["key", k];
    arr.text = k;
    return arr;
  }


/*-------------------------------------------------------------------------------------------------------------------------------------
   reference is defined as matching a opening brace followed by an identifier plus one or more filters and a closing brace
---------------------------------------------------------------------------------------------------------------------------------------*/
reference
  = ld n:identifier f:filters rd {
    return withPosition(["reference", n, f]);
  }

/*-------------------------------------------------------------------------------------------------------------------------------------
   literal is defined as matching esc or any character except the double quotes and it cannot be a tag
---------------------------------------------------------------------------------------------------------------------------------------*/

literal "literal"
  = b:(!tag c:(esc / [^"]) {return c})+
  { return b.join('') }

esc
  = '\\"' { return '"' }

raw "raw"
  = "{`" rawText:(!"`}" character:. {return character})* "`}"
  { return withPosition(["raw", rawText.join('')]) }

comment "comment"
  = "{!" c:(!"!}" c:. {return c})* "!}"
  { return withPosition(["comment", c.join('')]) }

/*-------------------------------------------------------------------------------------------------------------------------------------
   tag is defined as matching an opening brace plus any of #?^><+%:@/~% plus 0 or more whitespaces plus any character or characters that
   doesn't match rd or eol plus 0 or more whitespaces plus a closing brace
---------------------------------------------------------------------------------------------------------------------------------------*/

tag
  = ld ws* [#?^><+%:@/~%] (!rd !eol .)+ ws* rd
  / reference

ld
  = "{"

rd
  = "}"

lb
  = "["

rb
  = "]"

eol
  = "\n"        //line feed
  / "\r\n"      //carriage + line feed
  / "\r"        //carriage return
  / "\u2028"    //line separator
  / "\u2029"    //paragraph separator

ws
  = [\t\v\f \u00A0\uFEFF] / eol
